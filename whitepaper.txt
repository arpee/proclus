The Saito Network

Saito is a cryptocurrency platform for applications that need to send large amounts of data across the blockchain. You can use it to build un-astroturfable Internet forums, decentralized social networks, pay-to-play websites, distributed data-routing services, peer-to-peer email hosting, SSH-key registries that are secure from MITM attacks, and much much more.

On a technical level, the Saito platform is notable for its use of a disposable blockchain, a proof-of-transactions system that splits network fees between bandwidth and security providers according to market pressures, and an incentive structure that protects the network from sibyl attacks and ensures that even attackers with overwhelming influence in any sector cannot dictate the behavior of the network as a whole.

Part I: The Disposable Blockchain

As in other blockchains, users in the Saito Network create transactions and broadcast them into a mesh grid that assembles them into sequential blocks, treating the longest chain as the ledger of record. While all transactions support basic payment functionality, they also include a signed "message" field where data can be bundled and read by applications which sit atop the network. 

In the case of other blockchains, developers have been reluctant to permit users to include extra data in transactions out of fear of placing ever-increasing bandwidth and storage requirements on nodes. In the case of bitcoin, this has lead to conflict not only over the maximum blocksize, but even over the more trivial question of whether transactions should support a 40 or 80-byte OP_RETURN field.

At Saito we take for granted that even an 80-byte message field is hardly enough space for real-world applications, and our solution to the problem of data-creep is to use a disposable blockchain. In this system, the nodes in our network can simply throw out the oldest data in our ledger at predictable intervals, making it impossible for payment inputs to be used after an arbitrary length of time. Since the "genesis block" is always creeping forward there is no definitive starting time for the network, yet we do not consider this a major vulnerability because even bitcoin users are vulnerable to chain-poisoning at their first point of contact (i.e. client software download). And there remain many ways for users to guard themselves against the risk of ending up on a minority fork: primarily by connecting to multiple trusted peers and monitoring the longest-chain. And cross-fork payment issues can also be avoided by the use of large-transaction "inception payments" (payments-within-payments) in which the receiver only published the bundled payment to the blockchain once they can confirm they have access to the funds contained therein (i.e. as soon as they confirm they are on the same chain as the payment input). Here as elsewhere, extensible transactions allow creative ways to solve many problems that occur in other blockchains. And there is no practical limit to our creativity: we can even chain "inception payments" to include any number of participants, with the only limit being the point where the fees required for transmitting the transaction make the payment itself economically infeasible (i.e. the dreaded "limbo payment").

Our disposable blockchain gives our network many advantages over alternate systems. As unlike bitcoin, we do not face an ever-expanding UTXO set because "dust transactions" are eliminated organically from our system over time. We also avoid uncertainty over what the network-wide rates of inflation and deflation are, since we can recycle lost funds into future coinbase issuance and calculate the exact amount of currency in circulation at any point. The risk of attackers launching long-term re-organization attacks is also lower with Saito than with competing networks because many long-term attacks become impossible to pull-off with a disposable blockchain: attackers need not only to produce a viable competing blockchain as elsewhere, but now also need to do so before the network collectively discards the block they are using as the basis for their proposed fork.

While a disposable blockchain helps solve the technical challenges involved in scaling up transaction sizes, there are two more fundament economic problems we need to solve as well: the "tragedy of the commons" problem that is caused when transaction fees do not cover the true cost of long-term data storage, and the "free rider" problem that exists when miners (who provide transaction irreversibility) are paid out of fees while nodes (which provide bandwidth and open-access) are expected to operate on a volunteer basis. Because the bandwidth requirements of running a Saito node increase with transaction sizes, both problems will be intractable in our network unless we find some way to pay for node provision in addition to network security. This is a hard problem because the amount of funding we need for each group of actors depends entirely on economic pressures not on technical ones. And also because the distribution of fees cannot be made arbitrarily as with bitcoin but must instead be driven by a mechanism that allows the actual economic demands of applications for security vis-a-vis open access and connectivity to be reflected in the fee-distribution mechanism. And on top of all of this, our solution must also be secure against attack, and drive all actors in the the network to promote the welfare of the network even as it drives them to maximize their private profits.

Part II: The Solution

As in bitcoin, nodes in the Saito Network create blocks in order to secure the fees associated with bundling transactions. As unlike bitcoin, the cost of producing a block is not the arbitrary expenditure of "hash power" but rather a "burn fee" that is set algorithmically by the network. At present, this "burn fee" is set to a high value immediately after a block is found and decreases in stepwise fashion until it eventually hits zero, at which point any node on the network can produce a block free-of-charge. While this design eliminates the possibility of a "hash crash" by putting an upper-limit on the time between blocks, note that we still expect nodes to produce blocks faster on average: as soon as the transaction fees they have in their mempool are greater than the "burn fee" required by the network (i.e. as soon as profitable). This is shown in the graph below:

[ graph of economic pressures ]

It is easy to see how this results in a optimized blocktime: the pace of block production is determined by the volume of transactions fees paid into the system as a whole. And while it is less obvious that this provides equivalent security to a proof-of-work system, consideration will show that it does: attackers who wish to re-write the main chain will not succeed unless they are capable of producing blocks at a faster pace. And this means in practice that they will need either a greater flow of transaction fees than the rest of the network combined, or be willing to burn their own capital to make up the difference: creating fake transactions that nonetheless burn real fees. As the graph below illustrates, the cost any attack thus depends on how quickly the attackers need to produce blocks to overcome the main chain.

[ graph of attacker blocktime ]

To ensure that even minor and temporary increases in the pace of block production cost significant amounts of money, our network automatically adjusts its "burn fee" upwards over time to keep blocktime constant as transaction volume grows. One subtle benefit of this design is that attacking our network grows more expensive the more transactions it serves, essentially creating a virtuous cycle that encourages economic activity to concentrate on the most secure chain. Another more subtle advantage of this approach is that by quantifying the costs of any attack, users and applications can gauge for themselves whether security is adequate or inadequate for their needs. Yet another subtle benefit of this design is that long-term attacks become far much expensive to pull-off than short-term chain re-organizations, since the pace of block production in long-term chain re-writes needs to be significantly higher than in short-term ones in order for attackers to pull off a network-wide chain-re-organization before their forking-off-block is discarded from the ledger.

Of course, there is also a major design flaw we need to overcome:

[ graph of deflation ]

As can be seen in the graph above, any network which relies upon nodes to "burn capital" to issue blocks will eventually run out of funds. We can avoid this by adding a coinbase to our system, but as long as the block-finding node has any influence over how funds are distributed (as is the case in other blockchains), a savvy attacker can sibyl or otherwise game the block-finding process to increase their chances of capturing the revenue. If we were to use the new block hash value to randomly distribute funds between nodes in the network, for instance, an attacker could experiment with producing multiple valid blocks until it found one that benefited it individually. And this design thus fails our requirement that economic incentives need to promote the welfare of the system as whole, since any flaw of this nature not only reduces the cost of a re-organization attack (encouraging attackers to subsidize their attacks with recycled money), but also transforms our network into a thinly-disguised proof-of-work system, one in which nodes now compete to earn profits not by processing transactions efficiently so much as expending resources to sibyl/game the network.

Fortunately, we have a solution to this problem, and it constitutes one of the major innovations of the Saito Network. And it is remarkable since in addition to making it impossible for nodes to game currency issuance, and thus enable proof-of-transactions as a secure alternative to both proof-of-stake and proof-of-work, our method also secures the network against sibyl attacks, ensures that nodes continually optimize the distribution of transactions through the system, and creates an economic game that naturally allocates fees between bandwidth and security providers in the most efficient way possible. This solution is the incorporation of an economic game in our fee-distribution process that ensures good behavior by the three players in the network: users, nodes and miners. And then we ensure that the resulting dynamic always protects the network by ensuring that any two parties can always collude to balance the overweening influence of a predominant third.

Part III: The Struggle for Profit

Our game begins with a zero-sum battle between nodes and miners for the "burn fees" paid by our nodes during the course of block-creation. This game works as follows:

Every time a node produces a block, it collects what profit it can and bundles the remaining fees into a "golden ticket" that contains a computational puzzle for miners to solve, along with a vote on whether to increase, decrease or hold constant the share of the burn fee that will ultimately be distributed to miners instead of randomly to one of the bandwidth-providing nodes in the network ("paysplit"). Miners choose themselves whether to solve these golden tickets, but finding a solution is not enough, for should a miner succeed in solving one, it must propagate its solution back into the network as a fee-paying transaction for inclusion in the very next block. As part of this solution the miner may also make a secondary vote on whether to increase, decrease or hold constant the difficulty of the computational puzzle. This dynamic is illustrated below:

[ golden tickets and puzzles ]

From these simple rules a remarkable game ensues. And while outlining the numerous strategies players may take in any situation is beyond the scope of this paper, we can see that the struggle to control the network in our two-player game requires a delicate dance between collusion and cooperation for both nodes and miners alike. For while nodes and miners both want to generate at least one solution per golden ticket (because otherwise no-one gets paid), their interests otherwise diverge: miners prefer a high paysplit and high difficulty level, while nodes prefer a low paysplit and low difficulty level. While the reason for their disagreement over paysplit is obvious, that for their difference of opinion on mining difficulty is more subtle: miners prefer a high difficulty as that reduces the expected competition they face from their peers and thus lowers the expected transaction fee they need to pay to induce nodes to prefer their solution (i.e. increasing their "take-home" share of the burn-fee); nodes meanwhile prefer a low difficulty rate not only because inter-miner competition increases the fees paid to them (and speeds up the pace of block production in the process, further securing their own income) but also because easier golden tickets hold out the salivating prospect that nodes may be able to select between multiple solutions and even pick one that rewards them.

We specify that once a golden ticket is solved by a miner and their solution is included by a node, the coinbase funds in the ticket are released to the two winners of the game, and the votes over paysplit and difficulty take effect. And this is another point where the Saito Network diverges from all existing cryptosystems. Strategically, the fact that votes in our network pass back and forth between nodes and miners, and require implicit approval from both groups to take effect, pushes us into a dynamic where nodes and miners must collude to protect their group interests (refusing to process the harmful votes of their counterparties) while using their own clout to promote friendly blocks. Yet collusion is difficult because both parties can also induce defection from the other side. Nodes can pad their golden ticket with extra funds to induce hashing support from renegade miners, while miners can propagate their solutions with higher fees to bribe support from nodes.

Whereas most cryptocurrencies work as technical games, the Saito Network plays out as a zero-sum economic battle that is fundamentally unsolvable. For the competition between our two groups is ultimately not driven based on algorithmic factors so much as competitive pressures to collude in order to protect long-term profits. Yet because cartelization inevitably pushes up profits and because our system is open-by-design, excessive profit cannot survive over the long-term: any side that succeeds in driving up class income will simultaneously invite the market to provide more of the desired value, whether by inducing miners to enter the market, or inducing nodes to take advantage of a high paysplit and "pull the trigger" on block production faster than their peers.

Our two-player game will eventually reach equilibrium at the point where the security provided by miners is optimal given their relative costs of collusion, but we acknowledge that this level is arbitrary and may not reflect the amount of security (or bandwidth) desired by the applications on the network, something especially relevant given that our demand for security from miners decreases naturally as the volume of transactions grows. And so we introduce a third party whose market preferences ensure we hit an optimal economic distribution of fees between nodes and miners. This third party consists of the users who make up the network, and whom we allow to tag their transactions with an optional paysplit vote. Should a user-originated transaction contain a paysplit vote, our system insists that it can only be included in a block which votes in the same direction. Users who choose to take sides in this ongoing struggle between nodes and miners thus sacrifice the reliability and speed of transaction confirmation, but gain marginal influence over the direction of the network by increasing the flow of capital to the party which represents its interests in the central two-player game.

Our resulting three-party game is thus unsolvable. Miners are perhaps the most influential party at small scale, but lose influence as the volume of transactions grows (adding a secondary level of security) and it becomes easier for nodes to collude (i.e. harder for miners to operate their own nodes). And while the user/application influence is arguably weakest at the beginning, it ultimately becomes the most powerful influence on the network. And yet even with any group at its apex, no particular group is ever fully ascendant, for any two players in our game can always collude to protect the network from the overweening influence of the third player.

Part IV: Security in the Saito Network

The dynamic described above is sufficient to secure the network. To make attacks more expensive, we have nodes sign transactions as they pass them through the network, creating an unforgeable history of the path each transaction takes to its point of confirmation. We also decrease the amount of the transaction fee available to nodes with each hop a transaction takes through the network. And we specify that the node which benefits from the node portion of the golden ticket is selected from one of the recorded participants according to a random input variable provided as part of the mining solution.

These additional restrictions secure our network from common attacks visible in other cryptocurrencies which are -- oddly -- not often recognized as attacks. In our system, for instance, transactions are naturally valuable to nodes which participate in the P2P network and useless to attackers which "lurk" on the edges. The fact that nodes must participate in the P2P network prevents an under-provision of connectivity and defends us against subtle attacks on open-access like those posed by the bitcoin FIBRE network, a closed relay which benefits colluding participants by undermining the profitability of those who mine on the P2P network. Sibyl attacks are also eliminated over time, because nodes themselves are incentivized to purge sibyls from profitable transaction paths: and in routing around them they increase the robustness of the network as whole. Nodes pay other nodes for connectivity in the form of valuable transaction flow, and transaction hoarding becomes a minority strategy since even the nodes which merely participated in propagating a transaction have a shot at winning the node-share of the golden ticket.

Security is also reinforced by the incentive structure of our economic game. For one, if network security falls too low, all parties can increase it by simply agreeing to pay miners more. Greater pay for miners encourages them to support the threatened chain in the long-run, while the increased competition attracted by the fattened paysplit speeds up block issuance on the threatened chain. Even in situations where the network is not under active attack, the miner/node battle over the paysplit vote also serves a "canary in the coalmine" function, encouraging miners themselves to issue an alternate chain if they control enough hashpower to outcompete the main chain. Rather counterintuitively, it is the threat and possibility of short-term miner attacks that forces the network to keep its short-term security levels high enough that it is protected from long-term attacks.

And since it is theoretically possible for a stealth chain to tweak its paysplit and difficulty settings in order to lower its overall cost of block production, our difficulty vote plays an equally important role in warding off attacks. The reason for this is that because miners need to solve "golden tickets" in order for the network to "approve" consensus changes to the paysplit/difficulty settings, higher difficulty levels force attackers to devote more time and money to changing consensus settings. Properly understood, this offers a significant improvement over the security of bitcoin's proof-of-work function, since our network is protected not only by the need for attackers to have the financial resources to generate transaction volume, but also now by a miner-protected voting mechanism which requires significant hashpower to overcome. And it stipulates that the main chain -- saving a total collapse in user, miner and node activity -- will always be able to change its own network settings more quickly than attackers can manipulate their own.

There are many subtle attacks and responses that flow out of our economic game. Elucidating them all is beyond the scope of this paper. But most responses are obvious. One unlikely but possible attack is an attacker burning capital to manipulate the burn fee of the main chain up, and then continuing to produce blocks on a lower-difficulty stealth chain at a faster pace than the main network can adjust its burn fee downwards again. This can be avoided by having nodes arbitrarily prefer blocks that have a higher initial burn fee than their competitors at any particular block depth.

In any event, blockchain security is not just about protecting users from reorganization attacks. It also implies censorship resistance. And in this field, note that even a successful attack on the network is not able to accomplish much beyond driving up the price of network token while amassing the resources for an attack on the network. Extremely wealthy attackers can burn cash to censor transactions, but they can do this in bitcoin as well (by pricing out competing transactions). And even if an attack does overwrite a substantial portion of the blockchain, most of the transactions they overwrite can be almost immediately bundled onto the end of the winning chain by the nodes which initially published them, where they then add to the security of the now-longest chain. And with users shifting from direct payments to "inception payments" in the face of greater network insecurity, and exchanges scrambling to increase their support for miners in the face of greater risk, losses from any re-organization attack will disproportionately affect miners and nodes. And of course the network can promptly recover unless the attacker has essentially limitless financial resources, in which case users can simply sell their tokens for profit and move to a network fork.

On a final note, we also observe that by forcing the network to deal with only a finite amount of data at any time, we are also protected from a huge class of software development risks. Whereas other blockchains deal with enormous scalability problems driven by their need to develop custom code to enable scaling, the fact that we need to store only a limited amount of transactional data (and can always reduce this period as our transaction volume grows) keeps our software requirements on the scale where we can leverage existing industrial databases and other components. In-memory databases already scale into the hundreds of terabytes, and there is no risk of server requirements expanding beyond the amount that an independent server can handle, given the predictable income stream generated from the work of storing and processing transaction data.

Part VI: Project Status and Roadmap

For information on Saito, including a live software client that runs directly in any Internet browser, we warmly invite you to visit our website at:

http://saitonet.io

We currently working code and are moving towards a general release. Our blockchain is often reset and payments are disabled on the main network so that our demonstrations work, but our network is working and running applications. We have applied for a provisional patent for defensive purposes, and are building the first layer of applications we intend to serve as both useful tools as well as tutorials for third-party developers looking to build their own applications:

decentralized email service
user-controlled social network
un-astroturfable online forum
secure SSH key registry
and more....

We hope to see you online.

















