var saito = require('../../../saito');
var ModTemplate = require('../../template');
var util = require('util');


//////////////////
// CONSTRUCTOR  //
//////////////////
function Facebook(app) {

  if (!(this instanceof Facebook)) { return new Facebook(app); }

  Facebook.super_.call(this);

  this.app               = app;

  this.name              = "Facebook";
  this.browser_active    = 0;
  this.mylastposttime    = 0;
  this.mylastcommenttime = 0;

  return this;

}
module.exports = Facebook;
util.inherits(Facebook, ModTemplate);






Facebook.prototype.initializeHTML = function initializeHTML(app) {

  if (app.BROWSER == 0) { return; }

  msg = {};
  msg.id = 10;
  msg.time   = "Aug 17, 2017";
  msg.from   = "alexander@saito";
  msg.module = "Facebook";
  msg.title  = "Hello World";
  msg.data   = "It would be hard to identify the exact source of that inner intuition, not founded on rational argument, which prompted our refusal to enter the NKVD schools. It certainly didn't derive from the lectures on historical materialism we listened to: it was clear from them that the struggle against the internal enemy was a crucial battlefront, and to share in it was an honorable task. Our decision even ran counter to our material interests: at that time the provincial university we attended could not promise us anything more than the chance to teach in a rural school in a remote area for miserly wages. The NKVD school dangled before us special rations and double or triple pay. Our feelings could not be put into words—and even if we had found the words, fear would have prevented our speaking them aloud to one another. It was not our minds that resisted but something inside our breasts. People can shout at you from all sides: \"You must!\" And your own “head can be saying also: \"You must!\" But inside your breast there is a sense of revulsion, repudiation. I don't want to. It makes me feel sick. Do what you want without me; I want no part of it.";
  this.attachMessage(msg, app, 1);


/*****
  // load archived messages
  for (cxz = 0; cxz < app.archives.messages.length; cxz++) {
    tmptx = app.archives.messages[cxz];
      if (tmptx.transaction.msg.type == "post") {
console.log("ADDING POST: ");
        facebook_self.addPostToWall(tmptx, app, 1);
      }
      if (tmptx.transaction.msg.type == "comment") {
console.log("ADDING COMMENT: ");
        facebook_self.addCommentToPost(tmptx, app, 1);
      }
  }
*****/


  facebook_self = this;
  app.archives.processMessages(20, function (err, txarray) {
console.log("HERE WE ARE PROCESSING: "+txarray.length);
    for (bv = 0; bv < txarray.length; bv++) {
console.log(txarray[bv]);
      if (txarray[bv].transaction.msg.type == "post") {
console.log("ADDING POST: ");
console.log(txarray[bv]);
        facebook_self.addPostToWall(txarray[bv], app, 1);
      }
      if (txarray[bv].transaction.msg.type == "comment") {
console.log("ADDING COMMENT: ");
console.log(txarray[bv]);
        facebook_self.addCommentToPost(txarray[bv], app, 1);
      }
    }
  });


}
//////////////////////
// Add Post to Wall //
//////////////////////
Facebook.prototype.addCommentToPost = function addCommentToPost(tx, app, prepend = 0) {

    // fetch data from tx
    msg = {};
    msg.id      = tx.transaction.id;
    msg.time    = tx.transaction.ts;
    msg.from    = tx.transaction.from[0].add;
    msg.module  = tx.transaction.msg.module;
    msg.data    = tx.transaction.msg.data;
    msg.post_id = tx.transaction.msg.post_id;

    if (msg.from == app.wallet.returnPublicKey()) {
      if (msg.time == this.mylastcommenttime) {
	console.log("NOT ADDING COMMENT: would be repost");
	return;
      }
      this.mylastcommenttime = msg.time;
    } else {
      tocheck = "#comment_"+msg.id;
      if ($(tocheck).length > 0) { 
	console.log("COMMENT ALREADY FOUND -- not adding");
	return; 
      }
    }

    this.attachComment(msg, app, prepend);

}
Facebook.prototype.addPostToWall = function addPostToWall(tx, app, prepend = 0) {

    // fetch data from tx
    msg = {};
    msg.id     = tx.transaction.id;
    msg.time   = tx.transaction.ts;
    msg.from   = tx.transaction.from[0].add;
    msg.module = tx.transaction.msg.module;
    msg.data   = tx.transaction.msg.data;

    if (msg.from == app.wallet.returnPublicKey()) {
      if (msg.time == this.mylastposttime) {
	console.log("NOT ADDING POST: would be repost");
	return;
      }
      this.mylastposttime = msg.time;
    } else {
      tocheck = "#post_box_"+tx.transaction.id;
      if ($(tocheck).length > 0) { 
	console.log("POST ALREADY FOUND -- not adding");
	return; 
      }
    }

console.log("ATTACH MESSAGE: "+msg);

    this.attachMessage(msg, app, prepend);

}
Facebook.prototype.formatComment = function formatComment(msg, app) {
  return '\
  <div class="comment" id="comment_'+msg.id+'"> \
    <div class="comment_header"> \
      <div class="post_comment_avatar"></div> \
      <div class="post_comment_titlebox"> \
        <div class="post_comment_name">'+this.formatAuthor(msg.from, app)+'</div> \
        <div class="post_comment_date">'+this.formatDate(msg.time)+'</div> \
      </div> \
    <div> \
    <div class="comment_text">'+msg.data+'</div> \
  </div> \
';
}
Facebook.prototype.formatNewPost = function formatNewPost(app) {
  return '\
<div class="post_box" id="post_box_create">\
  <div class="post_header"> \
    <div class="post_header_avatar"> \
    </div> \
    <div class="post_header_titlebox"> \
      <div class="post_header_name">'+this.formatAuthor(app.wallet.returnPublicKey(), app)+'</div> \
      <div class="post_header_date">'+this.formatDate(new Date().getTime())+'</div> \
    </div> \
  </div> \
  <div class="post_create"><textarea id="post_create_textarea" class="post_create_textarea"></textarea></div> \
  <div class="facebook_button publish_button" id="publish_button" alt="publish"><i class="fa fa-upload"></i> <div class="post_controls_label">PUBLISH</div></div> \
</div> \
';
}
Facebook.prototype.formatPost = function formatPost(msg, app) {
  return '\
<div class="post_box" id="post_box_'+msg.id+'">\
  <div class="post_header"> \
    <div class="post_header_avatar"> \
    </div> \
    <div class="post_header_titlebox"> \
      <div class="post_header_name">'+this.formatAuthor(msg.from, app)+'</div> \
      <div class="post_header_date">'+this.formatDate(msg.time)+'</div> \
      <div class="post_header_address">'+msg.from+'</div> \
    </div> \
  </div> \
  <div class="post_content">'+msg.data+'</div> \
  <div class="post_controls"> \
    <div id="post_controls_like_'+msg.id+'" class="post_controls_like" alt="like"><i class="fa fa-heart-o"></i> <div class="post_controls_label">LIKE</div></div> \
    <div id="post_controls_comment_'+msg.id+'" class="post_controls_comment" alt="comment"><i class="fa fa-comment-o"></i> <div class="post_controls_label">COMMENT</div></div> \
    <div id="post_controls_share_'+msg.id+'" class="post_controls_share" alt="share"><i class="fa fa-share-alt"></i> <div class="post_controls_label">SHARE</div></div> \
  </div> \
  <div class="post_commentbox"> \
    <div class="post_comments"> \
    </div> \
    <div class="post_comments_create"> \
    </div> \
  </div> \
</div> \
';
}
Facebook.prototype.formatNewComment = function formatNewComment(msg, app) {
  return '\
  <textarea id="post_comments_create_textarea" class="post_comments_create_textarea"></textarea> \
  <div class="facebook_button post_comments_button" id="comment_button_'+msg.id+'" alt="publish"><i class="fa fa-upload"></i> <div class="post_controls_label">LEAVE COMMENT</div></div> \
';
}
Facebook.prototype.attachComment = function attachComment(msg, app, prepend = 0) {
  cbsel = "#post_box_" + msg.post_id + " > .post_commentbox > .post_comments";
  if (prepend == 0) {
    $(cbsel).append(this.formatComment(msg, app));
  } else {
    $(cbsel).prepend(this.formatComment(msg, app));
  }
  this.attachEvents(app);
}
Facebook.prototype.attachMessage = function attachMessage(msg, app, prepend = 0) {
console.log("ATTACHING MSG");
console.log(msg);
  if (prepend == 0) {
    $('#posts').append(this.formatPost(msg, app));
  } else {
    $('#posts').prepend(this.formatPost(msg, app));
  }
console.log("ATTACHED");
  this.attachEvents(app);
}
Facebook.prototype.attachEvents = function attachEvents(app) {

  facebook_self = this;



  $('#add_friend').off();
  $('#add_friend').on('click', function() {

    $.fancybox({
      href            : '#lightbox_follow',
      fitToView       : false,
      width           : '300px',
      height          : '140px',
      closeBtn        : true,
      autoSize        : false,
      closeClick      : false,
      openEffect      : 'none',
      closeEffect     : 'none',
      helpers: {
        overlay : {
          closeClick : false
        }
      },
      keys : {
        close : null
      },
      afterShow : function(){

        $('.lightbox_follow_submit').off();
        $('.lightbox_follow_submit').on('click', function() {

          newfriend = $('.lightbox_follow_input').val();
	  if (facebook_self.isPublicKey(newfriend) == 1) {

		  answer = newfriend.substring(0,12) + "...";

	  	  // add them
                  app.keys.addKey(answer, newfriend, 1, "Facebook");
		  app.keys.saveKeys();

                  facebook_self.showBrowserAlert("Account Followed");

                  $.fancybox.close();

                  facebook_self.initializeHTML(app);
                  facebook_self.attachEvents(app);

                  // send an email to the recipient
                  to = answer;
                  from = app.wallet.returnPublicKey();
                  amount = 0.0;
                  fee = 0.005;

                  server_email_html = 'You have a new follower: \
<p></p> \
The account with this public key: \
<p></p> \
'+ answer +' \
<br /> \
'+ facebook_self.app.wallet.returnIdentifier() +' \
<p></p> \
Is now following you on the Saito network. \
';

                  newtx = app.wallet.createUnsignedTransactionWithFee(to, amount, fee);
                  newtx.transaction.msg.module = "Email";
                  newtx.transaction.msg.body   = server_email_html;
                  newtx.transaction.msg.title  = "New Facebook Follower!";
                  newtx = app.wallet.signTransaction(newtx);
                  app.blockchain.mempool.addTransaction(newtx);
                  app.network.propagateTransaction(newtx);

	  } else {

            app.dns.fetchRecordFromAppropriateServer(newfriend, function(answer) {

              if (answer == "server not found") {
                facebook_self.showBrowserAlert("To follow this account, you need to add a DNS server that tracks this domain. Alternately, just provide their public key directly");
	        return;
              }
	   
	      if (answer == "dns server publickey changed") {
                facebook_self.showBrowserAlert("Cannot lookup public key of this account -- your DNS server is using an out-of-date publickey");
	        return;
	      }
	      if (answer == "no dns servers") {
	        facebook_self.showBrowserAlert("To follow this account, you need to add a DNS server that tracks this domain. Alternately, just provide their public key directly");
	        return;
	      } else {
                if (answer == "") {
                  facebook_self.showBrowserAlert("DNS server cannot find a record for this user");
                } else {

	  	  // add them
                  app.keys.addKey(answer, newfriend, 1, "Facebook");
		  app.keys.saveKeys();

                  facebook_self.showBrowserAlert("Account Followed");

                  $.fancybox.close();

                  facebook_self.initializeHTML(app);
                  facebook_self.attachEvents(app);

                  // send an email to the recipient
                  to = answer;
                  from = app.wallet.returnPublicKey();
                  amount = 0.0;
                  fee = 0.005;

                  server_email_html = 'You have a new follower: \
<p></p> \
The account with this public key: \
<p></p> \
'+ answer +' \
<br /> \
'+ facebook_self.app.wallet.returnIdentifier() +' \
<p></p> \
Is now following you on the Saito network. \
';

                  newtx = app.wallet.createUnsignedTransactionWithFee(to, amount, fee);
                  newtx.transaction.msg.module = "Email";
                  newtx.transaction.msg.body   = server_email_html;
                  newtx.transaction.msg.title  = "New Facebook Follower!";
                  newtx = app.wallet.signTransaction(newtx);
                  app.blockchain.mempool.addTransaction(newtx);
                  app.network.propagateTransaction(newtx);

		}
              }
            });
          }
        });
      }
    });
  });



  $('#publish_button').off('click');
  $('#publish_button').on('click', function() {

    tmppost = $('#post_create_textarea').val();
    publickeyaddress = app.wallet.returnPublicKey();
    amount = 0.0;
    fee = 0.0;

    newtx = app.wallet.createUnsignedTransactionWithFee(publickeyaddress, amount, fee);
    newtx.transaction.msg.module = "Facebook";
    newtx.transaction.msg.data   = tmppost;
    newtx.transaction.msg.type   = "post";
    newtx = app.wallet.signTransaction(newtx);
    app.network.propagateTransaction(newtx);
    facebook_self.addPostToWall(newtx, app, 1);

    $('#post_box_create').remove();

  });


  $('#new_post').off('click');
  $('#new_post').on('click', function() {
    $('#posts').prepend(facebook_self.formatNewPost(app));
    $('#post_create_textarea').focus();
    facebook_self.attachEvents(app);
  });



  $('.post_controls_like').off('click');
  $('.post_controls_like').on('click', function() {
     id = $(this).attr('id');
     msgid = id.substring(19);
     alert("Liking Post: "+msgid);
   });


  $('.post_controls_comment').off('click');
  $('.post_controls_comment').on('click', function() {
     id = $(this).attr('id');
     msg = {}; msg.id = id.substring(22);
     pcc = facebook_self.formatNewComment(msg,app);
     $('.post_comments_create').hide();
     $('.post_comments_create').hide();
     $('.post_comments_create').html(pcc);
     $('.post_comments_create').slideDown();
     facebook_self.attachEvents(app);
   });





   $('.post_comments_button').off('click');
   $('.post_comments_button').on('click', function() {
     id = $(this).attr('id');
     msg = {}; msg.id = id.substring(15);
     tmpcomment = $('#post_comments_create_textarea').val();

     publickey_selector = "#post_box_" + msg.id + " > .post_header > .post_header_titlebox > .post_header_address";
     publickeyaddress = $(publickey_selector).text();
     amount = 0.0;
     fee = 0.0005;

     newtx = app.wallet.createUnsignedTransactionWithFee(publickeyaddress, amount, fee);
     newtx.transaction.msg.module  = "Facebook";
     newtx.transaction.msg.type    = "comment";
     newtx.transaction.msg.data    = tmpcomment;
     newtx.transaction.msg.post_id = msg.id;
     newtx = app.wallet.signTransaction(newtx);
     app.network.propagateTransaction(newtx);
     facebook_self.addCommentToPost(newtx, app, 1);
     $('.post_comments_create').slideUp().empty();

   });



  $('.post_controls_share').off('click');
  $('.post_controls_share').on('click', function() {
     id = $(this).attr('id');
     msgid = id.substring(20);
     alert("Sharing Post: "+msgid);
   });

}







/////////////////////////
// Handle Web Requests //
/////////////////////////
Facebook.prototype.webServer = function webServer(app, expressapp) {

  expressapp.get('/facebook/', function (req, res) {
    res.sendFile(__dirname + '/web/index.html');
    return;
  });
  expressapp.get('/facebook/style.css', function (req, res) {
    res.sendFile(__dirname + '/web/style.css');
    return;
  });

}





//////////////////////////
// Handle Peer Requests //
//////////////////////////
Facebook.prototype.handlePeerRequest = function handlePeerRequest(app, message, peer, mycallback) {
}







//////////////////
// Confirmation //
//////////////////
Facebook.prototype.onConfirmation = function onConfirmation(tx, conf, app) {

  if (app.BROWSER == 0) { return; }

  if (app.keys.isWatched(tx.transaction.to[0].add) == 1 || tx.transaction.to[0].add == app.wallet.returnPublicKey()) {

    // facebook all zero-conf
    if (conf == 0) {

      // "this" is technically the array that calls us, so we have
      // to use a roundabout way of accessing the functions in our
      // email module in the onConfirmation function.
      //

console.log("TRYING TO SAVE FACEBOOK TX");
console.log(tx.transaction.msg);

      if (tx.transaction.msg.type == "post") {
console.log("ADDING POST TO WALL: ");
        app.modules.returnModule("Facebook").addPostToWall(tx, app, 1);
      }
      if (tx.transaction.msg.type == "comment") {
console.log("ADDING COMMENT TO POST: ");
        app.modules.returnModule("Facebook").addCommentToPost(tx, app, 1);
      }
console.log("SAVING MESSAGE TO ARCHIVES");
      app.archives.saveMessage(tx);

    }
  }

}





Facebook.prototype.formatDate = function formateDate(unixtime) {

  x = new Date(unixtime);
  return x.getDate() + " / " + (x.getMonth()+1) + " / " + x.getFullYear();

}

Facebook.prototype.formatAuthor = function formatAuthor(author, app) {

  x = this.app.keys.findByPublicKey(author);
  if (x != null) { return x.identifier; }

  if (author.length > 30) { return "me"; }

  return author;

}
Facebook.prototype.isPublicKey = function isPublicKey(publickey) {
  if (publickey.length == 66) {
    return 1;
  }
  return 0;
}

Facebook.prototype.showBrowserAlert = function showBrowserAlert(message="error") {
  if (this.app.BROWSER == 0) { return; }
  alert(message);
}



